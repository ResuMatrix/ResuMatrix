pipeline {
    agent any

    environment {
        // Environment variables
        GCP_CREDENTIALS = credentials('gcp-credentials')
        GCP_BUCKET_NAME = "resumatrix-embeddings"
        GCP_PROJECT_ID = "awesome-nimbus-452221-v2"
        MLFLOW_TRACKING_URI = "http://mlflow:5000"
        ARTIFACT_REGISTRY_REPO = "us-east1-docker.pkg.dev/awesome-nimbus-452221-v2/resume-fit-supervised/xgboost_and_cosine_similarity"
        MODEL_TAG = "xgboost-model-${BUILD_NUMBER}"
    }

    triggers {
        // Poll GCS bucket for changes every hour
        pollSCM('H * * * *')
    }

    stages {
        stage('Setup') {
            steps {
                sh '''
                    # Install Python 3 and required packages
                    echo "Installing Python 3 and required packages"
                    apt-get update
                    apt-get install -y python3 python3-pip python3-venv

                    # Set up GCP credentials from Jenkins
                    echo "Using GCP credentials from Jenkins"
                    export GOOGLE_APPLICATION_CREDENTIALS=${GCP_CREDENTIALS}

                    # Create Python virtual environment
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install --upgrade pip
                    pip install -r retraining_pipeline/requirements.txt
                    mkdir -p data model_registry
                '''
            }
        }

        stage('Download from GCS') {
            steps {
                sh '''
                    # Set up GCP credentials from Jenkins
                    export GOOGLE_APPLICATION_CREDENTIALS=${GCP_CREDENTIALS}

                    # Activate virtual environment
                    . venv/bin/activate

                    # Run the download script
                    python retraining_pipeline/download_from_gcs.py || {
                        echo "ERROR: Failed to download data from GCS. Please check your GCP credentials and bucket configuration."
                        exit 1
                    }
                '''
            }
        }

        stage('Run Retraining') {
            steps {
                sh '''
                    # Set up GCP credentials from Jenkins
                    export GOOGLE_APPLICATION_CREDENTIALS=${GCP_CREDENTIALS}

                    # Activate virtual environment
                    . venv/bin/activate

                    # Run the retraining script
                    python retraining_pipeline/run_retraining.py
                '''
            }
        }

        stage('Final Processing') {
            when {
                // Only run this stage if a new model was saved
                expression { return fileExists('model_registry/new_model_saved.txt') }
            }
            steps {
                sh '''
                    # Set up GCP credentials from Jenkins
                    export GOOGLE_APPLICATION_CREDENTIALS=${GCP_CREDENTIALS}

                    # Activate virtual environment
                    . venv/bin/activate

                    # Run the final processing script
                    cd retraining_pipeline
                    chmod +x run_without_docker.sh
                    ./run_without_docker.sh
                '''
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
